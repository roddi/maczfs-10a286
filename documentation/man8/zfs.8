'\" te
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").  
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.\" Copyright (c) 2007 Sun Microsystems, Inc. All Rights Reserved.
.\" Portions Copyright 2007 Apple Inc. All rights reserved.
.\" Use is subject to license terms.
.TH zfs 8 "16 Mar 2007" "Mac OS X" "BSD System Manager's Manual"
.SH NAME
zfs \- configures ZFS file systems
.SH SYNOPSIS
.LP
.nf
\fBzfs\fR [\fB-?\fR]
.fi

.LP
.nf
\fBzfs\fR \fBcreate\fR [\fB-p\fR] [\fB-o\fR property=\fIvalue\fR] ... \fIfilesystem\fR
.fi

.LP
.nf
\fBzfs\fR \fBdestroy\fR [\fB-rRf\fR] \fIfilesystem\fR|\fIsnapshot\fR
.fi

.LP
.nf
\fBzfs\fR \fBclone\fR [\fB-p\fR] \fIsnapshot\fR \fIfilesystem\fR
.fi

.LP
.nf
\fBzfs\fR \fBpromote\fR \fIclone-filesystem\fR
.fi

.LP
.nf
\fBzfs\fR \fBrename\fR [\fB-p\fR] \fIfilesystem\fR|\fIsnapshot\fR \fIfilesystem\fR|\fIsnapshot\fR
.fi

.LP
.nf
\fBzfs\fR \fBsnapshot\fR [\fB-r\fR] \fIfilesystem@snapname\fR
.fi

.LP
.nf
\fBzfs\fR \fBrollback\fR [\fB-rRf\fR] \fIsnapshot\fR
.fi

.LP
.nf
\fBzfs\fR \fBlist\fR [\fB-rH\fR] [\fB-o\fR \fIproperty\fR[,...]] [\fB-t\fR \fItype\fR[,...]]
    [\fB-s\fR \fIproperty\fR] ... [\fB-S\fR \fIproperty\fR] ... [\fIfilesystem\fR|\fIsnapshot\fR]\fR ...
.fi

.LP
.nf
\fBzfs\fR \fBset\fR \fIproperty\fR=\fIvalue\fR \fIfilesystem\fR ...
.fi

.LP
.nf
\fBzfs\fR \fBget\fR [\fB-rHp\fR] [\fB-o\fR \fIfield\fR[,...]]
    [\fB-s\fR \fIsource\fR[,...]] \fIall\fR | \fIproperty\fR[,...]
     \fIfilesystem\fR|\fIsnapshot\fR ...
.fi

.LP
.nf
\fBzfs\fR \fBinherit\fR [\fB-r\fR] \fIproperty\fR \fIfilesystem\fR... ...
.fi

.LP
.nf
\fBzfs\fR \fBupgrade\fR [\fB-v\fR]
.fi

.LP
.nf
\fBzfs\fR \fBupgrade\fR [\fB-r\fR] [\fB-V\fR \fIversion\fR] \fB-a\fR | \fIfilesystem\fR
.fi

.LP
.nf
\fBzfs\fR \fBmount\fR 
.fi

.LP
.nf
\fBzfs\fR \fBmount\fR  [\fB-vO\fR] [\fB-o \fIoptions\fR\fR] \fB-a\fR | \fIfilesystem\fR
.fi

.LP
.nf
\fBzfs\fR \fBunmount\fR [\fB-f\fR] \fB-a\fR | \fB\fIfilesystem\fR|\fImountpoint\fR\fR
.fi

.LP
.nf
\fBzfs\fR \fBsend\fR [\fB-vR\fR] [\fB-i\fR \fIsnapshot1\fR] \fB\fIsnapshot2\fR\fR
.fi

.LP
.nf
\fBzfs\fR \fBreceive\fR [\fB-vnF\fR ] \fIfilesystem\fR|\fIsnapshot\fR
.fi

.LP
.nf
\fBzfs\fR \fBreceive\fR [\fB-vnF\fR ] \fB-d\fR \fB\fIfilesystem\fR\fR
.fi

.SH DESCRIPTION
.LP
The \fBzfs\fR command configures ZFS datasets within a ZFS storage pool, as described in \fBzpool\fR(8). A
dataset is identified by a unique path within the ZFS namespace. For example:
.sp
.in +2
.nf
pool/{filesystem,snapshot}
.fi
.in -2
.sp

.LP
where the maximum length of a dataset name is \fBMAXNAMELEN\fR (256 bytes).
.LP
A dataset can be one of the following:
.sp
.ne 2
.mk
.na
\fB\fIfile system\fR\fR
.ad
.RS 15n
.rt  
A standard POSIX file system. ZFS file systems can be mounted within the standard file system namespace and behave like any other file system.
.RE

.sp
.ne 2
.mk
.na
\fB\fIsnapshot\fR\fR
.ad
.RS 15n
.rt  
A read-only version of a file system at a given point in time. It is specified as \fIfilesystem@name\fR.
.RE

.SS "ZFS File System Hierarchy"
.LP
A ZFS storage pool is a logical collection of devices that provide space for datasets. A storage pool is also the root of the ZFS file system hierarchy.
.LP
The root of the pool can be accessed as a file system, such as mounting and unmounting, taking snapshots, and setting properties. The physical storage characteristics, however, are managed by the \fBzpool\fR(8) command.
.LP
See \fBzpool\fR(8) for more information on creating and administering pools.
.SS "Snapshots"
.LP
A snapshot is a read-only copy of a file system. Snapshots can be created extremely quickly, and initially consume no additional space within the pool. As data within the active dataset changes, the snapshot consumes more data than would otherwise be shared with the active dataset.
.LP
Snapshots can have arbitrary names.
.LP
File system snapshots can be accessed under the ".zfs/snapshot" directory in the root of the file system. Snapshots are automatically mounted on demand and may be unmounted at regular intervals. The visibility of the ".zfs" directory can be controlled by the "snapdir"
property.
.SS "Clones"
.LP
A clone is a writable file system whose initial contents are the same as another dataset. As with snapshots, creating a clone is nearly instantaneous, and initially consumes no additional space.
.LP
Clones can only be created from a snapshot. When a snapshot is cloned, it creates an implicit dependency between the parent and child. Even though the clone is created somewhere else in the dataset hierarchy, the original snapshot cannot be destroyed as long as a clone exists. The "origin"
property exposes this dependency, and the \fBdestroy\fR command lists any such dependencies, if they exist.
.LP
The clone parent-child dependency relationship can be reversed by using the "\fBpromote\fR" subcommand. This causes the "origin" file system to become a clone of the specified file system, which makes it possible to destroy the file system that the clone
was created from.
.SS "Mount Points"
.LP
Creating a ZFS file system is a simple operation, so the number of file systems per system will likely be numerous. To cope with this, ZFS automatically manages mounting and unmounting file systems.
All automatically managed file systems are mounted by ZFS at boot time.
.LP
By default, file systems are mounted under /Volumes/fs, where fs is the name of the file system in the ZFS namespace. Directories are created and destroyed as needed.
.LP
A file system can also have a mount point set in the "mountpoint" property. This directory is created as needed, and ZFS automatically mounts the file system when the "\fBzfs mount -a\fR" command is invoked. The mountpoint property can be inherited, so if \fBVolumes/pool/home\fR has a mount point of \fB/export/stuff\fR, then \fBpool/home/user\fR automatically inherits a mount point of \fB/export/stuff/user\fR.
.LP
A file system mountpoint property of "none" prevents the file system from being mounted.
.LP
If needed, ZFS file systems can also be managed with traditional tools (\fBmount\fR, \fBumount\fR). If a file system's mount point is set to "legacy", ZFS makes no attempt to manage
the file system, and the administrator is responsible for mounting and unmounting the file system.
.SS "Native Properties"
.LP
Properties are divided into two types, native properties and user defined properties. Native properties either export internal statistics or control ZFS behavior. In addition, native properties are either editable or read-only. User properties have no effect on ZFS behavior,
but you can use them to annotate datasets in a way that is meaningful in your environment. For more information about user properties, see the "User Properties" section.
.LP
Every dataset has a set of properties that export statistics about the dataset as well as control various behavior. Properties are inherited from the parent unless overridden by the child. Snapshot properties can not be edited; they always inherit their inheritable properties. Properties
that are not applicable to snapshots are not displayed.
.LP
The values of numeric properties can be specified using the following human-readable suffixes (for example, "k", "KB", "M", "Gb", etc, up to Z for zettabyte). The following are all valid (and equal) specifications: 
.sp
.in +2
.nf
"1536M", "1.5g", "1.50GB".
.fi
.in -2
.sp

.LP
The values of non-numeric properties are case sensitive and must be lowercase, except for "mountpoint".
.LP
The following native properties consist of read-only statistics about the dataset. These properties cannot be set, nor are they inherited. Native properties apply to all dataset types unless otherwise noted.
.sp
.ne 2
.mk
.na
\fBtype\fR
.ad
.RS 17n
.rt  
The type of dataset: "filesystem", "snapshot", or "clone".
.RE

.sp
.ne 2
.mk
.na
\fBcreation\fR
.ad
.RS 17n
.rt  
The time this dataset was created.
.RE

.sp
.ne 2
.mk
.na
\fBused\fR
.ad
.RS 17n
.rt  
The amount of space consumed by this dataset and all its descendants. This is the value that is checked against this dataset's quota and reservation. The space used does not include this dataset's reservation, but does take into account the reservations of any descendant datasets.
The amount of space that a dataset consumes from its parent, as well as the amount of space that will be freed if this dataset is recursively destroyed, is the greater of its space used and its reservation.
.sp
When snapshots (see the "Snapshots" section) are created, their space is initially shared between the snapshot and the file system, and possibly with previous snapshots. As the file system changes, space that was previously shared becomes unique to the snapshot, and counted in
the snapshot's space used. Additionally, deleting snapshots can increase the amount of space unique to (and used by) other snapshots.
.sp
The amount of space used, available, or referenced does not take into account pending changes. Pending changes are generally accounted for within a few seconds. Committing a change to a disk using \fBfsync\fR(2) or \fBO_SYNC\fR does not necessarily guarantee that the space usage information is updated immediately.
.RE

.sp
.ne 2
.mk
.na
\fBavailable\fR
.ad
.RS 17n
.rt  
The amount of space available to the dataset and all its children, assuming that there is no other activity in the pool. Because space is shared within a pool, availability can be limited by any number of factors, including physical pool size, quotas, reservations, or other datasets
within the pool.
.sp
This property can also be referred to by its shortened column name, "avail".
.RE

.sp
.ne 2
.mk
.na
\fBreferenced\fR
.ad
.RS 17n
.rt  
The amount of data that is accessible by this dataset, which may or may not be shared with other datasets in the pool. When a snapshot or clone is created, it initially references the same amount of space as the file system or snapshot it was created from, since its contents are
identical.
.sp
This property can also be referred to by its shortened column name, "refer".
.RE

.sp
.ne 2
.mk
.na
\fBcompressratio\fR
.ad
.RS 17n
.rt  
The compression ratio achieved for this dataset, expressed as a multiplier. Compression can be turned on by running "zfs set compression=on \fIdataset\fR". The default value is "off".
.RE

.sp
.ne 2
.mk
.na
\fBmounted\fR
.ad
.RS 17n
.rt  
For file systems, indicates whether the file system is currently mounted. This property can be either "yes" or "no".
.RE

.sp
.ne 2
.mk
.na
\fBorigin\fR
.ad
.RS 17n
.rt  
For cloned file systems, the snapshot from which the clone was created. The origin cannot be destroyed (even with the \fB-r\fR or \fB-f\fR options) so long as a clone exists.
.RE

.LP
The following native properties can be used to change the behavior of a ZFS dataset.
.sp
.ne 2
.mk
.na
\fBquota=\fIsize\fR | \fInone\fR\fR
.ad
.sp .6
.RS 4n
Limits the amount of space a dataset and its descendants can consume. This property enforces a hard limit on the amount of space used. This includes all space consumed by descendants, including file systems and snapshots. Setting a quota on a descendant of a dataset that already
has a quota does not override the ancestor's quota, but rather imposes an additional limit.
.RE

.sp
.ne 2
.mk
.na
\fBreservation=\fIsize\fR | \fInone\fR\fR
.ad
.sp .6
.RS 4n
The minimum amount of space guaranteed to a dataset and its descendants. When the amount of space used is below this value, the dataset is treated as if it were taking up the amount of space specified by its reservation. Reservations are accounted for in the parent datasets' space
used, and count against the parent datasets' quotas and reservations.
.sp
This property can also be referred to by its shortened column name, "reserv".
.RE

.sp
.ne 2
.mk
.na
\fBrecordsize=\fIsize\fR\fR
.ad
.sp .6
.RS 4n
Specifies a suggested block size for files in the file system. This property is designed solely for use with database workloads that access files in fixed-size records. \fBZFS\fR automatically tunes block sizes according to internal algorithms optimized for typical
access patterns. 
.sp
For databases that create very large files but access them in small random chunks, these algorithms may be suboptimal. Specifying a "recordsize" greater than or equal to the record size of the database can result in significant performance gains. Use of this property for general
purpose file systems is strongly discouraged, and may adversely affect performance.
.sp
The size specified must be a power of two greater than or equal to 512 and less than or equal to 128 Kbytes.
.sp
Changing the file system's \fBrecordsize\fR only affects files created afterward; existing files are unaffected.
.sp
This property can also be referred to by its shortened column name, "recsize".
.RE

.sp
.ne 2
.mk
.na
\fBmountpoint=\fIpath\fR | \fInone\fR | \fIlegacy\fR\fR
.ad
.sp .6
.RS 4n
Controls the mount point used for this file system. See the "Mount Points" section for more information on how this property is used. 
.sp
When the mountpoint property is changed for a file system, the file system and any children that inherit the mount point are unmounted. If the new value is "legacy", then they remain unmounted. Otherwise, they are automatically remounted in the new location if the property was
previously "legacy" or "none", or if they were mounted before the property was changed. In addition, any shared file systems are unshared and shared in the new location.
.RE

.sp
.ne 2
.mk
.na
.sp
.ne 2
.mk
.na
\fBchecksum=\fIon\fR | \fIoff\fR | \fIfletcher2\fR, | \fIfletcher4\fR | \fIsha256\fR\fR
.ad
.sp .6
.RS 4n
Controls the checksum used to verify data integrity. The default value is "on", which automatically selects an appropriate algorithm (currently, \fIfletcher2\fR, but this may change in future releases). The value "off" disables integrity
checking on user data. Disabling checksums is NOT a recommended practice.
.RE

.sp
.ne 2
.mk
.na
\fBcompression=\fIon\fR | \fIoff\fR | \fIlzjb\fR | \fIgzip\fR | \fIgzip-N\fR\fR
.ad
.sp .6
.RS 4n
Controls the compression algorithm used for this dataset. The "lzjb" compression algorithm is optimized for performance while providing decent data compression. Setting compression to "on" uses the "lzjb" compression algorithm. The "gzip"
compression algorithm uses the same compression as the \fBgzip\fR(1) command.  You can specify the "gzip" level by using the value "gzip-\fIN\fR",
where \fIN\fR is an integer from 1 (fastest) to 9 (best compression ratio). Currently, "gzip" is equivalent to "gzip-6" (which is also the default for \fBgzip\fR(1)).
.sp
This property can also be referred to by its shortened column name "compress".
.RE

.sp
.ne 2
.mk
.na
\fBatime=\fIon\fR | \fIoff\fR\fR
.ad
.sp .6
.RS 4n
Controls whether the access time for files is updated when they are read. Turning this property off avoids producing write traffic when reading files and can result in significant performance gains, though it might confuse mailers and other similar utilities. The default value
is "on".
.RE

.sp
.ne 2
.mk
.na
\fBdevices=\fIon\fR | \fIoff\fR\fR
.ad
.sp .6
.RS 4n
Controls whether device nodes can be opened on this file system. The default value is "on".
.RE

.sp
.ne 2
.mk
.na
\fBexec=\fIon\fR | \fIoff\fR\fR
.ad
.sp .6
.RS 4n
Controls whether processes can be executed from within this file system. The default value is "on".
.RE

.sp
.ne 2
.mk
.na
\fBsetuid=\fIon\fR | \fIoff\fR\fR
.ad
.sp .6
.RS 4n
Controls whether the set-\fBUID\fR bit is respected for the file system. The default value is "on".
.RE

.sp
.ne 2
.mk
.na
\fBreadonly=\fIon\fR | \fIoff\fR\fR
.ad
.sp .6
.RS 4n
Controls whether this dataset can be modified. The default value is "off".
.sp
This property can also be referred to by its shortened column name, "rdonly".
.RE

.sp
.ne 2
.mk
.na
\fBsnapdir=\fIhidden\fR | \fIvisible\fR\fR
.ad
.sp .6
.RS 4n
Controls whether the ".zfs" directory is hidden or visible in the root of the file system as discussed in the "Snapshots" section. The default value is "hidden".
.RE

.sp
.ne 2
.mk
.na
\fBaclmode=\fBdiscard\fR | \fBgroupmask\fR | \fBpassthrough\fR\fR
.ad
.sp .6
.RS 4n
Controls how an \fBACL\fR is modified during \fBchmod\fR(2). A file system with an "aclmode" property of "\fBdiscard\fR"
deletes all \fBACL\fR entries that do not represent the mode of the file. An "aclmode" property of "\fBgroupmask\fR" (the default) reduces user or group permissions. The permissions are reduced, such that they are no greater than the group permission
bits, unless it is a user entry that has the same \fBUID\fR as the owner of the file or directory. In this case, the \fBACL\fR permissions are reduced so that they are no greater than owner permission bits. A file system with an "aclmode" property of "\fBpassthrough\fR" indicates that no changes will be made to the \fBACL\fR other than generating the necessary \fBACL\fR entries to represent the new mode of the file or directory.
.RE

.sp
.ne 2
.mk
.na
\fBaclinherit=\fBdiscard\fR | \fBnoallow\fR | \fBsecure\fR | \fBpassthrough\fR\fR
.ad
.sp .6
.RS 4n
Controls how \fBACL\fR entries are inherited when files and directories are created. A file system with an "aclinherit" property of "\fBdiscard\fR" does not inherit any \fBACL\fR entries. A file system with an "aclinherit"
property value of "\fBnoallow\fR" only inherits inheritable \fBACL\fR entries that specify "deny" permissions. The property value "\fBsecure\fR" (the default) removes the "\fBwrite_acl\fR" and "\fBwrite_owner\fR" permissions when the \fBACL\fR entry is inherited. A file system with an "aclinherit" property value of "\fBpassthrough\fR" inherits all inheritable \fBACL\fR entries without any modifications made to the \fBACL\fR entries when they are inherited.
.RE

.sp
.ne 2
.mk
.na
\fBcanmount=\fBon\fR | \fBoff\fR\fR
.ad
.sp .6
.RS 4n
If this property is set to "\fBoff\fR", the file system cannot be mounted, and is ignored by "\fBzfs mount -a\fR". This is similar to setting the "mountpoint" property to "\fBnone\fR", except
that the dataset still has a normal "mountpoint" property which can be inherited. This allows datasets to be used solely as a mechanism to inherit properties. One use case is to have two logically separate datasets have the same mountpoint, so that the children of both datasets appear
in the same directory, but may have different inherited characteristics. The default value is "\fBon\fR". 
.sp
This property is not inherited.
.RE

.sp
.ne 2
.mk
.na
\fBxattr=\fBon\fR\fR
.ad
.sp .6
.RS 4n
Controls whether extended attributes are enabled for this file system. The default value is "\fBon\fR".
.RE

.sp
.ne 2
.mk
.na
\fBcopies=\fB1\fR | \fB2\fR | \fB3\fR\fR
.ad
.sp .6
.RS 4n
Controls the number of copies of data stored for this dataset. These copies are in addition to any redundancy provided by the pool, for example, mirroring or raid-z. The copies are stored on different disks, if possible. The space used by multiple copies is charged to the associated
file and dataset, changing the "used" property and counting against quotas and reservations.
.sp
Changing this property only affects newly-written data. Therefore, set this property at file system creation time by using the "\fB-o\fR copies=" option.
.RE

.sp
.ne 2
.mk
.na
\fBversion=1|2|3\fR
.ad
.sp .6
.RS 4n
The on-disk version of this file system, which is independent of the pool version. This property can only be set to later supported versions.
See "zfs upgrade" for details.
.RE

.LP
The following three properties cannot be changed after the file system is created, and therefore, should be set when the file system is created. If the properties are not set with the "zfs create" or "zpool create" commands, these properties are inherited from the parent dataset. If the parent dataset lacks these properties due to having been created prior to these features being supported, the new file system will have the default values for these properties.
.sp
.ne 2
.mk
.na
\fBcasesensitivity=\fIsensitive\fR | \fIinsensitive\fR\fR
.ad
.sp .6
.RS 4n
Indicates whether the file name matching algorithm used by the file system should be case-sensitive or case-insensitive. The default value for the "casesensitivity" property is "sensitive." Traditionally, UNIX and POSIX file systems have case-sensitive file names.
.RE

.sp
.ne 2
.mk
.na
\fBnormalization=\fInone\fR | \fIformC\fR | \fIformDf\fR | \fIformKC\fR | \fIformKD\fR\fR
.ad
.sp .6
.RS 4n
Indicates whether the file system should perform a unicode normalization of file names whenever two file names are compared, and which normalization algorithm should be used. File names are always stored unmodified, names are normalized as part of any comparison process. If this property is set to a legal value other than "none," and the "utf8only" property was left unspecified, the "utf8only" property is automatically set to "on." The default value of the "normalization" property is "none." This property cannot be changed after the file system is created.
.RE

.sp
.ne 2
.mk
.na
\fButf8only=\fIon\fR | \fIoff\fR\fR
.ad
.sp .6
.RS 4n
Indicates whether the file system should reject file names that include characters that are not present in the UTF-8 character code set. If this property is explicitly set to "off," the normalization property must either not be explicitly set or be set to "none." The default value for the "utf8only" property is "off." This property cannot be changed after the file system is created.
.RE

.SS "Temporary Mount Point Properties"
.LP
When a file system is mounted, either through \fBmount\fR(8) for legacy mounts or the "\fBzfs mount\fR" command for normal file systems,
its mount options are set according to its properties. The correlation between properties and mount options is as follows:
.sp
.in +2
.nf
    PROPERTY                MOUNT OPTION
    devices                 devices/nodevices
    exec                    exec/noexec
    readonly                ro/rw
    setuid                  setuid/nosetuid
.fi
.in -2
.sp

.LP
In addition, these options can be set on a per-mount basis using the \fB-o\fR option, without affecting the property that is stored on disk. The values specified on the command line override the values stored in the dataset. The \fB-nosuid\fR option is an alias for "nodevices,nosetuid".
These properties are reported as "temporary" by the "\fBzfs get\fR" command. If the properties are changed while the dataset is mounted, the new setting overrides any temporary settings.
.SS "User Properties"
.LP
In addition to the standard native properties, ZFS supports arbitrary user properties. User properties have no effect on ZFS behavior, but applications or administrators can use them to annotate datasets.
.LP
User property names must contain a colon (":") character, to distinguish them from native properties. They might contain lowercase letters, numbers, and the following punctuation characters: colon (":"), dash ("-"), period ("."), and underscore
("_"). The expected convention is that the property name is divided into two portions such as "\fImodule\fR:\fIproperty\fR", but this namespace is not enforced by \fBZFS\fR. User property names can be at most 256 characters,
and cannot begin with a dash ("-").
.LP
When making programmatic use of user properties, it is strongly suggested to use a reversed \fBDNS\fR domain name for the \fImodule\fR component of property names to reduce the chance that two independently-developed packages use the same property name for
different purposes. Property names beginning with "com.apple." are reserved for use by Apple Inc.
.LP
The values of user properties are arbitrary strings, are always inherited, and are never validated. All of the commands that operate on properties ("zfs list", "zfs get", "zfs set", etc.) can be used to manipulate both native properties and user properties.
Use the "\fBzfs inherit\fR" command to clear a user property . If the property is not defined in any parent dataset, it is removed entirely. Property values are limited to 1024 characters.
.LP
.SH SUBCOMMANDS
.LP
All subcommands that modify state are logged persistently to the pool in their original form.
.sp
.ne 2
.mk
.na
\fB\fBzfs ?\fR\fR
.ad
.sp .6
.RS 4n
Displays a help message.
.RE

.sp
.ne 2
.mk
.na
\fB\fBzfs create\fR [\fB-p\fR] [\fB-o\fR property=value] ... \fIfilesystem\fR\fR
.ad
.sp .6
.RS 4n
Creates a new \fBZFS\fR file system. The file system is automatically mounted according to the "mountpoint" property inherited from the parent.
.sp
.ne 2
.mk
.na
\fB\fB-p\fR\fR
.ad
.RS 21n
.rt  
Creates all the non-existing parent datasets. Datasets created in this
manner are automatically mounted according to the "mountpoint"
property inherited from their parent. Any property specified on the
command line using the -o option is ignored. If the target filesystem
already exists, the operation completes successfully.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-o\fR property=value\fR
.ad
.RS 21n
.rt  
Sets the specified property as if "\fBzfs set property=value\fR" was invoked at the same time the dataset was created. Any editable \fBZFS\fR property can also be set at creation time. Multiple \fB-o\fR options can be specified. An
error results if the same property is specified in multiple \fB-o\fR options.
.RE

.sp
.ne 2
.mk
.na
\fB\fBzfs destroy\fR [\fB-rRf\fR] \fIfilesystem\fR|\fIsnapshot\fR\fR
.ad
.sp .6
.RS 4n
Destroys the given dataset. By default, the command unmounts any file systems that are currently mounted, and refuses to destroy a dataset that has active dependents (children, snapshots, clones).
.sp
.ne 2
.mk
.na
\fB\fB-r\fR\fR
.ad
.RS 6n
.rt  
Recursively destroy all children. If a snapshot is specified, destroy all snapshots with this name in descendant file systems.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-R\fR\fR
.ad
.RS 6n
.rt  
Recursively destroy all dependents, including cloned file systems outside the target hierarchy. If a snapshot is specified, destroy all snapshots with this name in descendant file systems.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-f\fR\fR
.ad
.RS 6n
.rt  
Force an unmount of any file systems using the "\fBunmount -f\fR" command. This option has no effect on non-file systems or unmounted file systems.
.RE

Extreme care should be taken when applying either the \fB-r\fR or the \fB-f\fR options, as they can destroy large portions of a pool and cause unexpected behavior for mounted file systems in use. 
.RE

.sp
.ne 2
.mk
.na
\fB\fBzfs clone\fR \fIsnapshot\fR \fIfilesystem\fR\fR
.ad
.sp .6
.RS 4n
Creates a clone of the given snapshot. See the "Clones" section for details. The target dataset can be located anywhere in the \fBZFS\fR hierarchy, and is created as the same type as the original.
.RE

.sp
.ne 2
.mk
.na
\fB\fBzfs promote\fR \fIfilesystem\fR\fR
.ad
.sp .6
.RS 4n
Promotes a clone file system to no longer be dependent on its "origin" snapshot. This makes it possible to destroy the file system that the clone was created from. The clone parent-child dependency relationship is reversed, so that the "origin" file system
becomes a clone of the specified file system. 
.sp
The snaphot that was cloned, and any snapshots previous to this snapshot, are now owned by the promoted clone. The space they use moves from the "origin" file system to the promoted clone, so enough space must be available to accommodate these snapshots. No new space is consumed
by this operation, but the space accounting is adjusted. The promoted clone must not have any conflicting snapshot names of its own. The "\fBrename\fR" subcommand can be used to rename any conflicting snapshots.
.RE

.sp
.ne 2
.mk
.na
\fB\fBzfs rename\fR \fIfilesystem\fR|\fIsnapshot\fR \fIfilesystem\fR|\fIsnapshot\fR\fR
.ad
.sp .6
.RS 4n
Renames the given dataset. The new target can be located anywhere in the \fBZFS\fR hierarchy, with the exception of snapshots. Snapshots can only be renamed within the parent file system. When renaming a snapshot, the parent file system of the snapshot does
not need to be specified as part of the second argument. Renamed file systems can inherit new mount points, in which case they are unmounted and remounted at the new mount point.
.RE

.sp
.ne 2
.mk
.na
\fB\fBzfs snapshot\fR [\fB-r\fR] \fIfilesystem@name\fR\fR
.ad
.sp .6
.RS 4n
Creates a snapshot with the given name. See the "Snapshots" section for details.
.sp
.ne 2
.mk
.na
\fB\fB-r\fR\fR
.ad
.RS 6n
.rt  
Recursively create snapshots of all descendant datasets. Snapshots are taken atomically, so that all recursive snapshots correspond to the same moment in time.
.RE

.RE

.sp
.ne 2
.mk
.na
\fB\fBzfs rollback\fR [\fB-rRf\fR] \fIsnapshot\fR\fR
.ad
.sp .6
.RS 4n
Roll back the given dataset to a previous snapshot. When a dataset is rolled back, all data that has changed since the snapshot is discarded, and the dataset reverts to the state at the time of the snapshot. By default, the command refuses to roll back to a snapshot other than
the most recent one. In order to do so, all intermediate snapshots must be destroyed by specifying the \fB-r\fR option. The file system is unmounted and remounted, if necessary.
.sp
.ne 2
.mk
.na
\fB\fB-r\fR\fR
.ad
.RS 6n
.rt  
Recursively destroy any snapshots more recent than the one specified.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-R\fR\fR
.ad
.RS 6n
.rt  
Recursively destroy any more recent snapshots, as well as any clones of those snapshots.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-f\fR\fR
.ad
.RS 6n
.rt  
Force an unmount of any file systems using the "\fBunmount -f\fR" command. 
.RE

.RE

.sp
.ne 2
.mk
.na
\fB\fBzfs\fR \fBlist\fR [\fB-rH\fR] [\fB-o\fR \fIprop\fR[,\fIprop\fR] ]... [ \fB-t\fR \fItype\fR[,\fItype\fR]...] [ \fB-s\fR \fIprop\fR [\fB-s\fR \fIprop\fR]... [ \fB-S\fR \fIprop\fR [\fB-S\fR \fIprop\fR]... [\fIfilesystem\fR|\fIsnapshot\fR|\fI/pathname\fR|.\fI/pathname\fR ...\fR
.ad
.sp .6
.RS 4n
Lists the property information for the given datasets in tabular form. If specified, you can list property information by the absolute pathname or the relative pathname. By default, all datasets are displayed and contain the following fields:
.sp
.in +2
.nf
name,used,available,referenced,mountpoint
.fi
.in -2
.sp

.sp
.ne 2
.mk
.na
\fB\fB-H\fR\fR
.ad
.RS 11n
.rt  
Used for scripting mode. Do not print headers and separate fields by a single tab instead of arbitrary whitespace.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-r\fR\fR
.ad
.RS 11n
.rt  
Recursively display any children of the dataset on the command line. 
.RE

.sp
.ne 2
.mk
.na
\fB\fB-o\fR \fIprop\fR\fR
.ad
.RS 11n
.rt  
A comma-separated list of properties to display. The property must be one of the properties described in the "Native Properties" section, or the special value "name" to display the dataset name.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-s\fR \fIprop\fR\fR
.ad
.RS 11n
.rt  
A property to use for sorting the output by column in ascending order based on the value of the property. The property must be one of the properties described in the "Properties" section, or the special value "name" to sort by the dataset name. Multiple
properties can be specified at one time using multiple \fB-s\fR property options. Multiple \fB-s\fR options are evaluated from left to right in decreasing order of importance. 
.sp
The following is a list of sorting criteria:
.RS +4
.TP
.ie t \(bu
.el o
Numeric types sort in numeric order.
.RE
.RS +4
.TP
.ie t \(bu
.el o
String types sort in alphabetical order.
.RE
.RS +4
.TP
.ie t \(bu
.el o
Types inappropriate for a row sort that row to the literal bottom, regardless of the specified ordering.
.RE
.RS +4
.TP
.ie t \(bu
.el o
If no sorting options are specified the existing behavior of "\fBzfs list\fR" is preserved.
.RE
.RE

.sp
.ne 2
.mk
.na
\fB\fB-S\fR \fIprop\fR\fR
.ad
.RS 11n
.rt  
Same as the \fB-s\fR option, but sorts by property in descending order. 
.RE

.sp
.ne 2
.mk
.na
\fB\fB-t\fR \fItype\fR\fR
.ad
.RS 11n
.rt  
A comma-separated list of types to display, where "type" is one of "filesystem" or "snapshot". For example, specifying "\fB-t snapshot\fR" displays only snapshots.
.RE

.RE

.sp
.ne 2
.mk
.na
\fB\fBzfs set\fR \fIproperty\fR=\fIvalue\fR \fIfilesystem\fR ...\fR
.ad
.sp .6
.RS 4n
Sets the property to the given value for each dataset. Only some properties can be edited. See the "Properties" section for more information on what properties can be set and acceptable values. Numeric values can be specified as exact values, or in a human-readable
form with a suffix of "B", "K", "M", "G", "T", "P", "E", "Z" (for bytes, Kbytes, Mbytes, gigabytes, terabytes, petabytes, exabytes, or zettabytes, respectively). Properties cannot be set on snapshots.
.RE

.sp
.ne 2
.mk
.na
\fB\fBzfs get\fR [\fB-rHp\fR] [\fB-o\fR \fIfield\fR[,\fIfield\fR]...] [\fB-s\fR \fIsource\fR[,\fIsource\fR]...] \fIall\fR | \fIproperty\fR[,\fIproperty\fR]... \fIfilesystem\fR|\fIsnapshot\fR ...\fR
.ad
.sp .6
.RS 4n
Displays properties for the given datasets. If no datasets are specified, then the command displays properties for all datasets on the system. For each property, the following columns are displayed:
.sp
.in +2
.nf
    name      Dataset name
    property  Property name
    value     Property value
    source    Property source. Can either be local, default,
              temporary, inherited, or none (-).
.fi
.in -2
.sp

All columns are displayed by default, though this can be controlled by using the \fB-o\fR option. This command takes a comma-separated list of properties as described in the "Native Properties" and "User Properties" sections.
.sp
The special value "all" can be used to display all properties for the given dataset.
.sp
.ne 2
.mk
.na
\fB\fB-r\fR\fR
.ad
.RS 13n
.rt  
Recursively display properties for any children.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-H\fR\fR
.ad
.RS 13n
.rt  
Display output in a form more easily parsed by scripts. Any headers are omitted, and fields are explicitly separated by a single tab instead of an arbitrary amount of space.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-o\fR \fIfield\fR\fR
.ad
.RS 13n
.rt  
A comma-separated list of columns to display. "name,property,value,source" is the default value. 
.RE

.sp
.ne 2
.mk
.na
\fB\fB-s\fR \fIsource\fR\fR
.ad
.RS 13n
.rt  
A comma-separated list of sources to display. Those properties coming from a source other than those in this list are ignored. Each source must be one of the following: "local,default,inherited,temporary,none". The default value is all sources.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-p\fR\fR
.ad
.RS 13n
.rt  
Display numbers in parsable (exact) values.
.RE

.RE

.sp
.ne 2
.mk
.na
\fB\fBzfs inherit\fR [\fB-r\fR] \fIproperty\fR \fIfilesystem\fR ...\fR
.ad
.sp .6
.RS 4n
Clears the specified property, causing it to be inherited from an ancestor. If no ancestor has the property set, then the default value is used. See the "Properties" section for a listing of default values, and details on which properties can be inherited.
.sp
.ne 2
.mk
.na
\fB\fB-r\fR\fR
.ad
.RS 6n
.rt  
Recursively inherit the given property for all children.
.RE

.RE

.sp
.ne 2
.mk
.na
\fB\fBzfs upgrade\fR [\fB-v\fR]\fR
.ad
.sp .6
.RS 4n
Displays a list of file systems that are not the most recent version.
.RE

.sp
.ne 2
.mk
.na
\fB\fBzfs upgrade\fR [\fB-r\fR] [\fB-V\fR \fIversion\fR] [\fB-a\fR | \fIfilesystem\fR]\fR
.ad
.sp .6
.RS 4n
Upgrades file systems to a new on-disk version. Once this is done, the file systems will no longer be accessible on systems running older versions of the software. "zfs send" streams generated from new snapshots of these file systems can not be accessed on systems running older versions of the software.
.sp
The file system version does not have to be upgraded when the pool version is upgraded, and vice versa.
.sp
.ne 2
.mk
.na
\fB\fB-a\fR\fR
.ad
.RS 13n
.rt  
Upgrade all file systems on all imported pools.
.RE

.sp
.ne 2
.mk
.na
\fB\fIfilesystem\fR\fR
.ad
.RS 13n
.rt  
Upgrade the specified file system.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-r\fR\fR
.ad
.RS 13n
.rt  
Upgrade the specified file system and all descendent file systems
.RE

.sp
.ne 2
.mk
.na
\fB\fB-v\fR \fIversion\fR\fR
.ad
.RS 13n
.rt  
Upgrade to the specified version. If the -V flag is not specified, this command upgrades to the most recent version. This option can only be used to increase the version number, and only up to the most recent version supported by this software.
.RE

.RE

.sp
.ne 2
.mk
.na
\fB\fBzfs mount\fR\fR
.ad
.sp .6
.RS 4n
Displays all \fBZFS\fR file systems currently mounted.
.RE

.sp
.ne 2
.mk
.na
\fB\fBzfs mount\fR[\fB-o\fR \fIopts\fR] [\fB-O\fR] \fB-a\fR\fR
.ad
.sp .6
.RS 4n
Mounts all available ZFS file systems. Invoked automatically as part of the boot process.
.sp
.ne 2
.mk
.na
\fB\fB-o\fR \fIopts\fR\fR
.ad
.RS 11n
.rt  
An optional comma-separated list of mount options to use temporarily for the duration of the mount. See the "Temporary Mount Point Properties" section for details.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-O\fR\fR
.ad
.RS 11n
.rt  
Perform an overlay mount. See \fBmount\fR(8) for more information.
.RE

.RE

.sp
.ne 2
.mk
.na
\fB\fBzfs mount\fR [\fB-o\fR \fIopts\fR] [\fB-O\fR] \fIfilesystem\fR\fR
.ad
.sp .6
.RS 4n
Mounts a specific ZFS file system. This is typically not necessary, as file systems are automatically mounted when they are created or the mountpoint property has changed. See the "Mount Points" section for details.
.sp
.ne 2
.mk
.na
\fB\fB-o\fR \fIopts\fR\fR
.ad
.RS 11n
.rt  
An optional comma-separated list of mount options to use temporarily for the duration of the mount. See the "Temporary Mount Point Properties" section for details.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-O\fR\fR
.ad
.RS 11n
.rt  
Perform an overlay mount. See \fBmount\fR(8) for more information.
.RE

.RE

.sp
.ne 2
.mk
.na
\fB\fBzfs unmount\fR \fB-a\fR\fR
.ad
.sp .6
.RS 4n
Unmounts all currently mounted \fBZFS\fR file systems. Invoked automatically as part of the shutdown process.
.RE

.sp
.ne 2
.mk
.na
\fB\fBzfs unmount\fR [\fB-f\fR] \fIfilesystem\fR|\fImountpoint\fR\fR
.ad
.sp .6
.RS 4n
Unmounts the given file system. The command can also be given a path to a \fBZFS\fR file system mount point on the system.
.sp
.ne 2
.mk
.na
\fB\fB-f\fR\fR
.ad
.RS 6n
.rt  
Forcefully unmount the file system, even if it is currently in use.
.RE

.sp
.ne 2
.mk
.na
\fB\fBzfs send\fR [\fB-i\fR \fIsnapshot1\fR] \fIsnapshot2\fR\fR
.ad
.sp .6
.RS 4n
Creates a stream representation of snapshot2, which is written to standard output. The output can be redirected to a file or to a different system (for example, using \fBssh\fR(1). By default, a full stream is generated.
.sp
.ne 2
.mk
.na
\fB\fB-i\fR \fIsnapshot1\fR\fR
.ad
.RS 16n
.rt  
Generate an incremental stream from \fIsnapshot1\fR to \fIsnapshot2\fR. The incremental source \fIsnapshot1\fR can be specified as the last component of the snapshot name (for example, the part after the "@"),
and it is assumed to be from the same file system as \fIsnapshot2\fR.
.RE

.RE

.LP
The format of the stream is evolving. No backwards compatibility is guaranteed. You may not be able to receive your streams on future versions of \fBZFS\fR.
.sp
.ne 2
.mk
.na
\fB\fBzfs receive\fR [\fB-vnF\fR] \fIfilesystem\fR|\fIsnapshot\fR\fR
.ad
.br
.na
\fB\fBzfs receive\fR [\fB-vnF\fR] \fB-d\fR \fIfilesystem\fR\fR
.ad
.sp .6
.RS 4n
Creates a snapshot whose contents are as specified in the stream provided on standard input. If a full stream is received, then a new file system is created as well. Streams are created using the "\fBzfs send\fR" subcommand, which by default creates a full
stream. "\fBzfs recv\fR" can be used as an alias for "\fBzfs receive\fR".
.sp
If an incremental stream is received, then the destination file system must already exist, and its most recent snapshot must match the incremental stream's source. The destination file system and all of its child file systems are unmounted and cannot be accessed during the receive operation.
.sp
The name of the snapshot (and file system, if a full stream is received) that this subcommand creates depends on the argument type and the \fB-d\fR option.
.sp
If the argument is a snapshot name, the specified \fIsnapshot\fR is created. If the argument is a file system name, a snapshot with the same name as the sent snapshot is created within the specified \fIfilesystem\fR.
If the \fB-d\fR option is specified, the snapshot name is determined by appending the sent snapshot's name to the specified \fIfilesystem\fR. If the \fB-d\fR option is specified, any required file systems within the specified one are created.
.sp
.ne 2
.mk
.na
\fB\fB-d\fR\fR
.ad
.RS 6n
.rt  
Use the name of the sent snapshot to determine the name of the new snapshot as described in the paragraph above.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-v\fR\fR
.ad
.RS 6n
.rt  
Print verbose information about the stream and the time required to perform the receive operation.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-n\fR\fR
.ad
.RS 6n
.rt  
Do not actually receive the stream. This can be useful in conjunction with the \fB-v\fR option to determine what name the receive operation would use.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-F\fR\fR
.ad
.RS 6n
.rt  
Force a rollback of the \fIfilesystem\fR to the most recent snapshot before performing the receive operation.
.RE

.RE

.SH EXAMPLES
.LP
\fBExample 1 \fRCreating a ZFS File System Hierarchy
.LP
The following commands create a file system named "\fBpool/home\fR" and a file system named "\fBpool/home/bob\fR". The mount point "\fB/export/home\fR" is set for the parent file system, and automatically inherited
by the child file system.

.sp
.in +2
.nf
# zfs create pool/home
# zfs set mountpoint=/export/home pool/home
# zfs create pool/home/bob
.fi
.in -2
.sp

.LP
\fBExample 2 \fRCreating a ZFS Snapshot
.LP
The following command creates a snapshot named "yesterday". This snapshot is mounted on demand in the ".zfs/snapshot" directory at the root of the "\fBpool/home/bob\fR" file system.

.sp
.in +2
.nf
# zfs snapshot pool/home/bob@yesterday
.fi
.in -2
.sp

.LP
\fBExample 3 \fRTaking and destroying multiple snapshots
.LP
The following command creates snapshots named "\fByesterday\fR" of "\fBpool/home\fR" and all of its descendant file systems. Each snapshot is mounted on demand in the ".zfs/snapshot" directory at the root of its file system. The
second command destroys the newly created snapshots.

.sp
.in +2
.nf
# \fBzfs snapshot -r pool/home@yesterday\fR
\fB# zfs destroy -r pool/home@yesterday\fR
.fi
.in -2
.sp

.LP
\fBExample 4 \fRTurning Off Compression
.LP
The following commands turn compression off for all file systems under "\fBpool/home\fR", but explicitly turns it on for "\fBpool/home/anne\fR".

.sp
.in +2
.nf
\fB# zfs set compression=off pool/home
# zfs set compression=on pool/home/anne\fR
.fi
.in -2
.sp

.LP
\fBExample 5 \fRListing ZFS Datasets
.LP
The following command lists all active zfs file systems in the system.

.sp
.in +2
.nf
\fB# zfs list\fR


  NAME                      USED  AVAIL  REFER  MOUNTPOINT
  pool                      100G   60G       -  /Volumes/pool
  pool/home                 100G   60G       -  /Volumes/export/home
  pool/home/bob              40G   60G     40G  /Volumes/export/home/bob
  pool/home/bob@yesterday     3M     -     40G  -
  pool/home/anne             60G   60G     40G  /Volumes/export/home/anne
.fi
.in -2
.sp

.LP
\fBExample 6 \fRSetting a Quota on a ZFS File System
.LP
The following command sets a quota of 50 gbytes for "\fBpool/home/bob\fR".

.sp
.in +2
.nf
\fB# zfs set quota=50G pool/home/bob\fR
.fi
.in -2
.sp

.LP
\fBExample 7 \fRListing ZFS Properties
.LP
The following command lists all properties for "\fBpool/home/bob\fR".

.sp
.in +2
.nf
\fB# zfs get all pool/home/bob\fR


  NAME           PROPERTY         VALUE                  SOURCE
  pool/home/bob  type             filesystem             -
  pool/home/bob  creation         Fri Feb 23 14:20 2007  -
  pool/home/bob  used             24.5K                  -
  pool/home/bob  available        50.0G                  -
  pool/home/bob  referenced       24.5K                  -
  pool/home/bob  compressratio    1.00x                  -
  pool/home/bob  mounted          yes                    -
  pool/home/bob  quota            50G                    local
  pool/home/bob  reservation      none                   default
  pool/home/bob  recordsize       128K                   default
  pool/home/bob  mountpoint       /pool/home/bob         default
  pool/home/bob  checksum         on                     default
  pool/home/bob  compression      off                    default
  pool/home/bob  atime            on                     default
  pool/home/bob  devices          on                     default
  pool/home/bob  exec             on                     default
  pool/home/bob  setuid           on                     default
  pool/home/bob  readonly         off                    default
  pool/home/bob  snapdir          hidden                 default
  pool/home/bob  aclmode          groupmask              default
  pool/home/bob  aclinherit       secure                 default
  pool/home/bob  canmount         on                     default
  pool/home/bob  xattr            on                     default
  pool/home/bob  copies           1                      default
  pool/home/bob  version          3                      -
  pool/home/bob  utf8only         off                    -
  pool/home/bob  normalization    none                   -
  pool/home/bob  casesensitivity  sensitive              -
  pool/home/bob  refquota         0                      default
  pool/home/bob  refreservation   0                      default

   
.fi
.in -2
.sp

.LP
The following command gets a single property value.

.sp
.in +2
.nf
\fB# zfs get -H -o value compression pool/home/bob\fR
on
.fi
.in -2
.sp

.LP
The following command lists all properties with local settings for "\fBpool/home/bob\fR".

.sp
.in +2
.nf
\fB# zfs get -r -s local -o name,property,value all pool/home/bob\fR

  NAME             PROPERTY      VALUE
  pool             compression   on
  pool/home        checksum      off
.fi
.in -2
.sp

.LP
\fBExample 8 \fRRolling Back a ZFS File System
.LP
The following command reverts the contents of "\fBpool/home/anne\fR" to the snapshot named "\fByesterday\fR", deleting all intermediate snapshots.

.sp
.in +2
.nf
\fB# zfs rollback -r pool/home/anne@yesterday\fR
.fi
.in -2
.sp

.LP
\fBExample 9 \fRCreating a ZFS Clone
.LP
The following command creates a writable file system whose initial contents are the same as "\fBpool/home/bob@yesterday\fR".

.sp
.in +2
.nf
\fB# zfs clone pool/home/bob@yesterday pool/clone\fR
.fi
.in -2
.sp

.LP
\fBExample 10 \fRPromoting a ZFS Clone
.LP
The following commands illustrate how to test out changes to a file system, and then replace the original file system with the changed one, using clones, clone promotion, and renaming:

.sp
.in +2
.nf
\fB# zfs create pool/project/production\fR
 populate /pool/project/production with data
\fB# zfs snapshot pool/project/production@today
# zfs clone pool/project/production@today pool/project/beta\fR
 make changes to /pool/project/beta and test them
\fB# zfs promote pool/project/beta
# zfs rename pool/project/production pool/project/legacy
# zfs rename pool/project/beta pool/project/production\fR
 once the legacy version is no longer needed, it can be
 destroyed
\fB# zfs destroy pool/project/legacy\fR
.fi
.in -2
.sp

.LP
\fBExample 11 \fRInheriting ZFS Properties
.LP
The following command causes "\fBpool/home/bob\fR" and "\fBpool/home/anne\fR" to inherit the "checksum" property from their parent.

.sp
.in +2
.nf
\fB# zfs inherit checksum pool/home/bob pool/home/anne\fR
.fi
.in -2
.sp

.LP
\fBExample 12 \fR Replicating ZFS Data
.LP
The following commands send a full stream and then an incremental stream to respective backup files, restoring them into "\fBpoolB/received/fs\fR@a" and "\fBpoolB/received/fs@b\fR", respectively. "\fBpoolB\fR" must contain
the file system "\fBpoolB/received\fR", and must not initially contain "\fBpoolB/received/fs\fR".

.sp
.in +2
.nf
# zfs send pool/fs@a > /tmp/backup_full \e
# zfs receive poolB/received/fs@a < /tmp/backup_full
# zfs send -i a pool/fs@b > /tmp/backup.today \e
# zfs receive poolB/received/fs < /tmp/backup.today
.fi
.in -2
.sp

.LP
\fBExample 13 \fRUsing the  zfs receive -d Option
.LP
The following command sends a full stream of "\fBpoolA/fsA/fsB@snap\fR" to a backup file, receiving it into "\fBpoolB/received/fsA/fsB@snap\fR". The "\fBfsA/fsB@snap\fR" portion of the received snapshot's name
is determined from the name of the sent snapshot. "\fBpoolB\fR" must contain the file system "\fBpoolB/received\fR".  If  "\fBpoolB/received/fsA\fR" does not exist, it will be created as an empty file system.

.sp
.in +2
.nf
\fB# zfs send poolA/fsA/fsB@snap > /tmp/backup.fsB \e
   # zfs receive -d poolB/received < /tmp/backup.fsB
   \fR
.fi
.in -2
.sp

.LP
\fBExample 14 \fRSetting User Properties
.LP
The following example sets the user defined "com.example:department" property for a dataset.

.sp
.in +2
.nf
\fB# zfs set com.example:department=12345 tank/accounting\fR
.fi
.in -2
.sp

.SH EXIT STATUS
.LP
The following exit values are returned:
.sp
.ne 2
.mk
.na
\fB\fB0\fR\fR
.ad
.RS 5n
.rt  
Successful completion. 
.RE

.sp
.ne 2
.mk
.na
\fB\fB1\fR\fR
.ad
.RS 5n
.rt  
An error occurred.
.RE

.sp
.ne 2
.mk
.na
\fB\fB2\fR\fR
.ad
.RS 5n
.rt  
Invalid command line options were specified.
.RE

.SH SEE ALSO
.LP
\fBssh\fR(1), \fBmount\fR(8), \fBzpool\fR(8), \fBchmod\fR(1), \fBstat\fR(1), \fBfsync\fR(2)

.SH HISTORY
.LP
The \fBzfs\fR command first appeared in Mac OS X 10.5 (Leopard).

